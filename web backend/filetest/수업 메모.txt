파일 전송
- 템플릿에서 form 태그와 input type=file을 이용해서 전송한다.
- form 태그에 enctype="multipart/form-data"를 반드시 추가한다.
- form 태그의 method는 반드시 post로 설정한다.
- 뷰에서 HttpRequest 객체에서 FILES 속성을 통해 전송된 파일을 조작할 수 있다.

파일 업로드(저장)
- 실제 파일은 서버 컴퓨터에 저장하고, 파일 저장 관련 정보를 데이터베이스에 기록한다.
- 전송된 파일 객체를 모델의 필드에 설정해서 모델 데이터를 생성한다.
- 모델을 통해서 자동으로 파일도 저장하고, 파일 저장 관련 정보도 기록한다.
- 업로드한 파일 이름이 중복될 수 있기 때문에,
  폴더를 구분하기도 하고 파일 이름에 암호화된 코드를 자동으로 추가하기도 한다.
- 데이터베이스에 파일 원본 이름 등 필요한 정보를 추가로 저장하는 걸 권장한다.

파일 다운로드
- 뷰에서 모델을 이용해서 파일을 가져온다.
- django.http.FileResponse 객체에 파일을 추가해서 응답하면 자동으로 파일 다운로드가 된다.
- 응답에 첨부 파일이 있다는 사실을 명시하고 파일 이름을 알려주는 설정을 추가한다.


페이징
- ListView에서 데이터 목록을 조회할 때 페이지로 나누어서 출력할 수 있다.
- views.py에서 ListView 클래스 기반 뷰에서 paginated_by 클래스 변수를 추가하면 자동 적용된다.
- 템플릿에 page_obj 객체가 전달되어 이 객체를 사용해서 페이지를 구현할 수 있다.

page_obj: Page 객체. 현재 페이지와 관련된 값들을 저장한 객체.
page_obj.number: 현재 조회 중인 페이지 번호.

page_obj.has_previous: 이전 페이지가 존재하는지 여부.
page_obj.has_next: 다음 페이지가 존재하는지 여부.
page_obj.has_other_pages: 이전 혹은 다음 페이지가 존재하는지 여부.
page_obj.previous_page_number: 이전 페이지 번호.
page_obj.next_page_number: 다음 페이지 번호.

page_obj.start_index: 현재 페이지에서 출력하는 데이터들의 첫 번째 id값.
page_obj.end_index: 현재 페이지에서 출력하는 데이터들의 마지막 id값.
page_obj.object_list: 현재 페이지에서 출력하는 데이터들.

page_obj.paginator: Paginator 객체. 전체 페이지와 관련된 값들을 저장한 객체.
page_obj.paginator.num_pages: 마지막 페이지 번호 또는 전체 페이지 수.
page_obj.paginator.page_range: 전체 페이지 수를 이용한 range 객체.
page_obj.paginator.count: 전체 데이터 수.
page_obj.paginator.object_list: 데이터베이스에 저장된 전체 데이터.
page_obj.paginator.per_page: 한 페이지 당 출력하는 데이터 수.