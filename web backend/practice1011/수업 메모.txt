자동화된 테스트(Automated Test)
- 웹 사이트 개발 시 제작한 기능이 정상적으로 동작하는지 테스트할 필요가 있다.
- 장고에서는 단위 테스트를 지원하기 위해 자동화된 테스트라고 불리는 문법을 지원한다.

- 각 앱 하위의 tests.py 파일에 TestCase 클래스를 상속하는 클래스를 작성한다.
- 해당 클래스에 테스트 메소드를 작성하고, 메소드마다 개별적으로 테스트를 진행한다.
- 테스트 메소드 내에서 assert 관련 메소드를 이용해서 검증을 진행한다.

- py manage.py test 명령어를 통해 테스트를 진행할 수 있다.
- 테스트 실행 시, 테스트용 데이터베이스인 default 데이터베이스를 자동으로 생성하고,
  해당 데이터베이스에 데이터를 입력하거나 하는 등의 조작이 이루어진다.
  테스트 종료 시 해당 데이터베이스는 자동으로 삭제된다.

단위 테스트(Unit Test)
- 웹 애플리케이션 전체를 실행해서 테스트하는 게 아닌,
  테스트에 필요한 일부 기능만 실행해서 진행하는 테스트.


클래스 기반 뷰(Class-based View, CBV)
- 장고에서는 뷰를 작성할 때 함수 뿐만 아니라 클래스 형태로도 작성할 수 있다.
- 클래스 형태로 작성된 뷰를 클래스 기반 뷰라고 한다.
- 주로 장고에서 제공하는 제네릭 뷰를 상속해서 구현한다.

제네릭 뷰(Generic View)
- 장고에서 미리 만들어서 제공하는, 클래스 기반 뷰.
- 기존에 제네릭 함수 뷰, 제네릭 클래스 뷰로 나뉘었지만,
  현재 시점에서는 제네릭 클래스 뷰만 사용함.
- 사실상 클래스 기반 뷰랑 혼용해서 표현함.

제네릭 뷰의 종류
- Base views
  - View: 최상위 뷰 클래스. 직접 사용할 일은 거의 없음.
  - TemplateView: 지정된 URL에 대해서 즉시 템플릿을 응답할 때 사용하는 뷰.
  - RedirectView: 지정된 URL에 대해서 즉시 리다이렉트 기능을 구현할 때 사용하는 뷰.
- Generic display views
  - ListView: 여러 건의 데이터를 조회할 때 사용하는 뷰.
  - DetailView: 한 건의 데이터를 조회할 때 사용하는 뷰.
- Generic editing views
  - CreateView: 데이터를 입력할 때 사용하는 뷰.
  - UpdateView: 데이터를 수정할 때 사용하는 뷰.
  - DeleteView: 데이터를 삭제할 때 사용하는 뷰.
  - FormView: 양식 데이터를 관리하기 위한 뷰.